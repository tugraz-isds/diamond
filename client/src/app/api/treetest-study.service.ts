import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { environment } from 'src/environments/environment';
import { CheckPasswordResponse, ICardSortStudyRequest, ICardSortStudyPasswordRequest } from './card-sort-study.service';


// INFO: see https://www.jstree.com/docs/json/ for type information
export interface IJstreeState {
  opened?: boolean;  // is the node open
  disabled?: boolean;  // is the node disabled
  selected?: boolean;  // is the node selected
}
export interface IJstreeNode {
  id?: string; // will be autogenerated if omitted
  text?: string; // node text
  icon?: string; // string for custom
  state?: IJstreeState;
  children?: Array<string | IJstreeNode>;  // array of strings or objects
  li_attr?: any;  // attributes for the generated LI node
  a_attr?: any;  // attributes for the generated A node
  data?: any;
}

export interface IJstreeNodeAlt {
  id: string; // required
  parent: string; // required
  text?: string; // node text
  icon?: string; // string for custom
  state?: IJstreeState;
  li_attr?: any;  // attributes for the generated LI node
  a_attr?: any;  // attributes for the generated A node
  data?: any;
}

export interface ITreetestTask {
  text: string;
  answer: string;
  id: string;
}

export interface IParticipant {
  id: string;
  participants: number;
}

export interface ITreetestStudy {
  _id?: string; // TODO: _id should be removed?
  name: string;
  password?: string;
  launched?: boolean;
  isLocked?: boolean;
  id: string;
  createdDate?: string;
  tree: Array<IJstreeNodeAlt>;
  tasks: Array<ITreetestTask>;
  user: string;
  welcomeMessage?: string;
  instructions?: string;
  thankYouScreen?: string;
  leaveFeedback?: string;
  leafNodes?: boolean;
  orderNumbers?: boolean;
  lastEnded: string | Date;
  lastLaunched: string | Date;
  isLaunchable?: boolean;
  numberOfParticipants?: number;
}

interface ITreetestStudyRequest {
  id: string;
}

export interface ITreetestStudyEdit {
  id: string;
  launched?: boolean;
  isLocked?: boolean;
  lastLaunched?: Date;
  lastEnded?: Date;
}

interface IGetTreetestStudyByUserIdRequest {
  user: string
}

@Injectable({
  providedIn: 'root'
})
export class TreetestStudyService {

  private readonly apiUrl: string = `${environment.apiUrl}/users/tree-study`;

  constructor(private http: HttpClient) { }

  get(studyId: string): Observable<ITreetestStudy> {
    const payload: ITreetestStudyRequest = {
      id: studyId
    };
    return this.http.post<ITreetestStudy>(`${this.apiUrl}/get`, payload);
  }

  getAllByUserId(email: string): Observable<Array<ITreetestStudy>> {
    const payload: IGetTreetestStudyByUserIdRequest = {
      user: email
    };
    return this.http.post<Array<ITreetestStudy>>(`${this.apiUrl}/getbyuserid`, payload);
  }

  add(treetestStudy: ITreetestStudy): Observable<void> {
    return this.http.post<void>(`${this.apiUrl}/add`, treetestStudy);
  }

  // FIXME: we dont need the whole object here, just the updated property should be allowed
  update(treetestStudy: ITreetestStudyEdit | ITreetestStudy): Observable<void> {
    return this.http.post<void>(`${this.apiUrl}/edit`, treetestStudy);
  }

  delete(studyId: string): Observable<void> {
    const payload: ITreetestStudyRequest = {
      id: studyId
    };
    return this.http.post<void>(`${this.apiUrl}/delete`, payload);
  }

  passwordRequired(studyId: string): Observable<CheckPasswordResponse | boolean> {
    const payload: ICardSortStudyRequest = {
      id: studyId
    };
    return this.http.post<CheckPasswordResponse | boolean>(`${this.apiUrl}/passwordrequired`, payload);
  }

  checkPassword(studyId: string, password: string): Observable<ITreetestStudy | boolean> {
    const payload: ICardSortStudyPasswordRequest = {
      id: studyId,
      password
    };
    return this.http.post<ITreetestStudy | boolean>(`${this.apiUrl}/password`, payload);
  }

}
